{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\googo\\\\.vscode\\\\GravityTile\\\\tile-monitor\\\\src\\\\components\\\\TileGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TileGrid = () => {\n  _s();\n  var _tileHistory$selected;\n  const [tileHistory, setTileHistory] = useState({});\n  const [selectedTile, setSelectedTile] = useState(null);\n\n  // Fetch activation history\n  useEffect(() => {\n    const fetchTileHistory = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/tile-history');\n        const data = await response.json();\n        setTileHistory(data);\n      } catch (error) {\n        console.error('Error fetching tile history:', error);\n      }\n    };\n    fetchTileHistory();\n    const interval = setInterval(fetchTileHistory, 3000); // Update every 3 sec\n    return () => clearInterval(interval);\n  }, []);\n\n  // Prepare graph data for the selected tile\n  const chartData = {\n    labels: selectedTile ? tileHistory[selectedTile] || [] : [],\n    datasets: [{\n      label: `Activation Times for Tile ${selectedTile}`,\n      data: selectedTile ? ((_tileHistory$selected = tileHistory[selectedTile]) === null || _tileHistory$selected === void 0 ? void 0 : _tileHistory$selected.map(() => 1)) || [] : [],\n      borderColor: 'blue',\n      backgroundColor: 'rgba(0, 0, 255, 0.2)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"Tile Activity Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-2\",\n      children: Array.from({\n        length: 100\n      }, (_, i) => i + 1).map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\n              ${tileHistory[number] ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\n            `,\n        onClick: () => setSelectedTile(number),\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), selectedTile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-gray-100 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: [\"Activation Times for Tile \", selectedTile]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          scales: {\n            y: {\n              display: false\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(TileGrid, \"ecZaViWXP16BIGpUeeY0yaVmsOk=\");\n_c = TileGrid;\nexport default TileGrid;\nvar _c;\n$RefreshReg$(_c, \"TileGrid\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","TileGrid","_s","_tileHistory$selected","tileHistory","setTileHistory","selectedTile","setSelectedTile","fetchTileHistory","response","fetch","data","json","error","console","interval","setInterval","clearInterval","chartData","labels","datasets","label","map","borderColor","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","length","_","i","number","onClick","options","scales","y","display","_c","$RefreshReg$"],"sources":["C:/Users/googo/.vscode/GravityTile/tile-monitor/src/components/TileGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nconst TileGrid = () => {\r\n  const [tileHistory, setTileHistory] = useState({});\r\n  const [selectedTile, setSelectedTile] = useState(null);\r\n\r\n  // Fetch activation history\r\n  useEffect(() => {\r\n    const fetchTileHistory = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/tile-history');\r\n        const data = await response.json();\r\n        setTileHistory(data);\r\n      } catch (error) {\r\n        console.error('Error fetching tile history:', error);\r\n      }\r\n    };\r\n\r\n    fetchTileHistory();\r\n    const interval = setInterval(fetchTileHistory, 3000); // Update every 3 sec\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Prepare graph data for the selected tile\r\n  const chartData = {\r\n    labels: selectedTile ? tileHistory[selectedTile] || [] : [],\r\n    datasets: [\r\n      {\r\n        label: `Activation Times for Tile ${selectedTile}`,\r\n        data: selectedTile ? tileHistory[selectedTile]?.map(() => 1) || [] : [],\r\n        borderColor: 'blue',\r\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-gray-800\">Tile Activity Monitor</h1>\r\n\r\n      <div className=\"grid grid-cols-10 gap-2\">\r\n        {Array.from({ length: 100 }, (_, i) => i + 1).map(number => (\r\n          <div\r\n            key={number}\r\n            className={`aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\r\n              ${tileHistory[number] ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\r\n            `}\r\n            onClick={() => setSelectedTile(number)}\r\n          >\r\n            {number}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {selectedTile && (\r\n        <div className=\"mt-6 p-4 bg-gray-100 rounded\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Activation Times for Tile {selectedTile}</h2>\r\n          <Line data={chartData} options={{ scales: { y: { display: false } } }} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}