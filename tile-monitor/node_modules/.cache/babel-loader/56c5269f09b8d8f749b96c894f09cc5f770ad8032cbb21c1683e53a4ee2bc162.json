{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\googo\\\\.vscode\\\\GravityTile\\\\tile-monitor\\\\src\\\\components\\\\TileGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TileGrid = () => {\n  _s();\n  const [tileHistory, setTileHistory] = useState([]);\n  const [activePeriods, setActivePeriods] = useState([]);\n\n  // Fetch activation history for the past 12 hours\n  useEffect(() => {\n    const fetchTileHistory = async () => {\n      try {\n        const response = await fetch('http://localhost:3001/api/tile-history');\n        const data = await response.json();\n        setTileHistory(data);\n        processActivePeriods(data);\n      } catch (error) {\n        console.error('Error fetching tile history:', error);\n      }\n    };\n    fetchTileHistory();\n    const interval = setInterval(fetchTileHistory, 3000); // Poll every 3 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Process active periods based on tile activation history\n  const processActivePeriods = data => {\n    if (data.length === 0) return;\n    let periods = [];\n    let previousTimestamp = new Date(data[0].timestamp);\n    let previousTile = data[0].tile;\n    for (let i = 1; i < data.length; i++) {\n      const currentTimestamp = new Date(data[i].timestamp);\n      const currentTile = data[i].tile;\n\n      // Store the previous tile's activation duration until the next tile was pressed\n      periods.push({\n        tile: previousTile,\n        start: previousTimestamp,\n        end: currentTimestamp\n      });\n\n      // Move to the next tile\n      previousTile = currentTile;\n      previousTimestamp = currentTimestamp;\n    }\n\n    // If the last tile is still \"on,\" set its end time as now\n    periods.push({\n      tile: previousTile,\n      start: previousTimestamp,\n      end: new Date()\n    });\n    setActivePeriods(periods);\n  };\n\n  // Prepare graph data for activation times\n  const chartData = {\n    labels: activePeriods.map(entry => `${entry.start.toLocaleTimeString()} - ${entry.end.toLocaleTimeString()}`),\n    datasets: [{\n      label: `Tile Activation Durations`,\n      data: activePeriods.map(entry => entry.tile),\n      borderColor: 'blue',\n      backgroundColor: 'rgba(0, 0, 255, 0.2)',\n      stepped: true // Ensures the graph shows \"on\" duration\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"Tile Activity Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-2\",\n      children: Array.from({\n        length: 30\n      }, (_, i) => i + 1).map(number => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\n              ${tileHistory.length > 0 && tileHistory[tileHistory.length - 1].tile === number ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\n            `,\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), activePeriods.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-gray-100 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Tile Activation Timeline (Past 12 Hours)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Tile Number\"\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(TileGrid, \"cml6roga99AIkoLcafrklEfioMA=\");\n_c = TileGrid;\nexport default TileGrid;\nvar _c;\n$RefreshReg$(_c, \"TileGrid\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","TileGrid","_s","tileHistory","setTileHistory","activePeriods","setActivePeriods","fetchTileHistory","response","fetch","data","json","processActivePeriods","error","console","interval","setInterval","clearInterval","length","periods","previousTimestamp","Date","timestamp","previousTile","tile","i","currentTimestamp","currentTile","push","start","end","chartData","labels","map","entry","toLocaleTimeString","datasets","label","borderColor","backgroundColor","stepped","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","number","options","scales","y","beginAtZero","title","display","text","_c","$RefreshReg$"],"sources":["C:/Users/googo/.vscode/GravityTile/tile-monitor/src/components/TileGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nconst TileGrid = () => {\r\n  const [tileHistory, setTileHistory] = useState([]);\r\n  const [activePeriods, setActivePeriods] = useState([]);\r\n\r\n  // Fetch activation history for the past 12 hours\r\n  useEffect(() => {\r\n    const fetchTileHistory = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3001/api/tile-history');\r\n        const data = await response.json();\r\n\r\n        setTileHistory(data);\r\n        processActivePeriods(data);\r\n      } catch (error) {\r\n        console.error('Error fetching tile history:', error);\r\n      }\r\n    };\r\n\r\n    fetchTileHistory();\r\n    const interval = setInterval(fetchTileHistory, 3000); // Poll every 3 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Process active periods based on tile activation history\r\n  const processActivePeriods = (data) => {\r\n    if (data.length === 0) return;\r\n\r\n    let periods = [];\r\n    let previousTimestamp = new Date(data[0].timestamp);\r\n    let previousTile = data[0].tile;\r\n\r\n    for (let i = 1; i < data.length; i++) {\r\n      const currentTimestamp = new Date(data[i].timestamp);\r\n      const currentTile = data[i].tile;\r\n\r\n      // Store the previous tile's activation duration until the next tile was pressed\r\n      periods.push({\r\n        tile: previousTile,\r\n        start: previousTimestamp,\r\n        end: currentTimestamp,\r\n      });\r\n\r\n      // Move to the next tile\r\n      previousTile = currentTile;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    // If the last tile is still \"on,\" set its end time as now\r\n    periods.push({\r\n      tile: previousTile,\r\n      start: previousTimestamp,\r\n      end: new Date(),\r\n    });\r\n\r\n    setActivePeriods(periods);\r\n  };\r\n\r\n  // Prepare graph data for activation times\r\n  const chartData = {\r\n    labels: activePeriods.map(entry => `${entry.start.toLocaleTimeString()} - ${entry.end.toLocaleTimeString()}`),\r\n    datasets: [\r\n      {\r\n        label: `Tile Activation Durations`,\r\n        data: activePeriods.map(entry => entry.tile),\r\n        borderColor: 'blue',\r\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\r\n        stepped: true, // Ensures the graph shows \"on\" duration\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-gray-800\">Tile Activity Monitor</h1>\r\n\r\n      <div className=\"grid grid-cols-10 gap-2\">\r\n        {Array.from({ length: 30 }, (_, i) => i + 1).map(number => (\r\n          <div\r\n            key={number}\r\n            className={`aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\r\n              ${tileHistory.length > 0 && tileHistory[tileHistory.length - 1].tile === number ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\r\n            `}\r\n          >\r\n            {number}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {activePeriods.length > 0 && (\r\n        <div className=\"mt-6 p-4 bg-gray-100 rounded\">\r\n          <h2 className=\"text-lg font-semibold mb-2\">Tile Activation Timeline (Past 12 Hours)</h2>\r\n          <Line data={chartData} options={{ scales: { y: { beginAtZero: true, title: { display: true, text: \"Tile Number\" } } } }} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}