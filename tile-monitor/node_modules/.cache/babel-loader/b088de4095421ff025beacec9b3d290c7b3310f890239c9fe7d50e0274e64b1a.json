{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\googo\\\\.vscode\\\\GravityTile\\\\tile-monitor\\\\src\\\\components\\\\TileGrid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TileGrid = () => {\n  _s();\n  const [tileHistory, setTileHistory] = useState([]);\n  const [activeTile, setActiveTile] = useState(null);\n  const [activePeriods, setActivePeriods] = useState([]);\n\n  // Fetch activation history for the past 12 hours\n  const fetchTileHistory = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/tile-history');\n      const data = await response.json();\n      if (data.length > 0) {\n        setTileHistory(data);\n        setActiveTile(data[data.length - 1].tile);\n        processActivePeriods(data);\n      } else {\n        console.log(\"No recent activations.\");\n        setTileHistory([]);\n        setActiveTile(null);\n      }\n    } catch (error) {\n      console.error('Error fetching tile history:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTileHistory();\n    const interval = setInterval(fetchTileHistory, 3000); // Poll every 3 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  // Process active periods for the graph\n  const processActivePeriods = data => {\n    if (data.length === 0) {\n      setActivePeriods([]);\n      return;\n    }\n    let periods = [];\n    let previousTimestamp = new Date(data[0].timestamp);\n    let previousTile = data[0].tile;\n    for (let i = 1; i < data.length; i++) {\n      const currentTimestamp = new Date(data[i].timestamp);\n      const currentTile = data[i].tile;\n      periods.push({\n        tile: previousTile,\n        start: previousTimestamp,\n        end: currentTimestamp\n      });\n      previousTile = currentTile;\n      previousTimestamp = currentTimestamp;\n    }\n    periods.push({\n      tile: previousTile,\n      start: previousTimestamp,\n      end: new Date()\n    });\n    setActivePeriods(periods);\n  };\n\n  // Function to log tile click and update UI\n  const handleTileClick = async tileNumber => {\n    try {\n      setActiveTile(tileNumber);\n      const response = await fetch('http://localhost:3001/api/log-tile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          tile: tileNumber\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to log tile click');\n      }\n      console.log(`Tile ${tileNumber} clicked and logged.`);\n      fetchTileHistory();\n    } catch (error) {\n      console.error('Error clicking tile:', error);\n    }\n  };\n\n  // Prepare graph data for activation times\n  const chartData = {\n    labels: activePeriods.map(entry => `${entry.start.toLocaleTimeString()} - ${entry.end.toLocaleTimeString()}`),\n    datasets: [{\n      label: `Tile Activation Durations`,\n      data: activePeriods.map(entry => entry.tile),\n      borderColor: 'blue',\n      backgroundColor: 'rgba(0, 0, 255, 0.2)',\n      stepped: true\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4 text-gray-800\",\n      children: \"Tile Activity Monitor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-2\",\n      children: Array.from({\n        length: 100\n      }, (_, i) => i + 1).map(number => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\n              ${activeTile === number ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\n            `,\n        onClick: () => handleTileClick(number),\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-gray-100 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold mb-2\",\n        children: \"Tile Activation Timeline (Past 12 Hours)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), activePeriods.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Tile Number\"\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"No activations in the past 12 hours.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(TileGrid, \"o2vwUsuo/r7RRm/43hnyhY0E83g=\");\n_c = TileGrid;\nexport default TileGrid;\nvar _c;\n$RefreshReg$(_c, \"TileGrid\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","TileGrid","_s","tileHistory","setTileHistory","activeTile","setActiveTile","activePeriods","setActivePeriods","fetchTileHistory","response","fetch","data","json","length","tile","processActivePeriods","console","log","error","interval","setInterval","clearInterval","periods","previousTimestamp","Date","timestamp","previousTile","i","currentTimestamp","currentTile","push","start","end","handleTileClick","tileNumber","method","headers","body","JSON","stringify","ok","Error","chartData","labels","map","entry","toLocaleTimeString","datasets","label","borderColor","backgroundColor","stepped","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","_","number","onClick","options","scales","y","beginAtZero","title","display","text","_c","$RefreshReg$"],"sources":["C:/Users/googo/.vscode/GravityTile/tile-monitor/src/components/TileGrid.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nconst TileGrid = () => {\r\n  const [tileHistory, setTileHistory] = useState([]);\r\n  const [activeTile, setActiveTile] = useState(null);\r\n  const [activePeriods, setActivePeriods] = useState([]);\r\n\r\n  // Fetch activation history for the past 12 hours\r\n  const fetchTileHistory = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/tile-history');\r\n      const data = await response.json();\r\n\r\n      if (data.length > 0) {\r\n        setTileHistory(data);\r\n        setActiveTile(data[data.length - 1].tile);\r\n        processActivePeriods(data);\r\n      } else {\r\n        console.log(\"No recent activations.\");\r\n        setTileHistory([]);\r\n        setActiveTile(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching tile history:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTileHistory();\r\n    const interval = setInterval(fetchTileHistory, 3000); // Poll every 3 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Process active periods for the graph\r\n  const processActivePeriods = (data) => {\r\n    if (data.length === 0) {\r\n      setActivePeriods([]);\r\n      return;\r\n    }\r\n\r\n    let periods = [];\r\n    let previousTimestamp = new Date(data[0].timestamp);\r\n    let previousTile = data[0].tile;\r\n\r\n    for (let i = 1; i < data.length; i++) {\r\n      const currentTimestamp = new Date(data[i].timestamp);\r\n      const currentTile = data[i].tile;\r\n\r\n      periods.push({\r\n        tile: previousTile,\r\n        start: previousTimestamp,\r\n        end: currentTimestamp,\r\n      });\r\n\r\n      previousTile = currentTile;\r\n      previousTimestamp = currentTimestamp;\r\n    }\r\n\r\n    periods.push({\r\n      tile: previousTile,\r\n      start: previousTimestamp,\r\n      end: new Date(),\r\n    });\r\n\r\n    setActivePeriods(periods);\r\n  };\r\n\r\n  // Function to log tile click and update UI\r\n  const handleTileClick = async (tileNumber) => {\r\n    try {\r\n      setActiveTile(tileNumber);\r\n\r\n      const response = await fetch('http://localhost:3001/api/log-tile', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ tile: tileNumber }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to log tile click');\r\n      }\r\n\r\n      console.log(`Tile ${tileNumber} clicked and logged.`);\r\n      fetchTileHistory();\r\n    } catch (error) {\r\n      console.error('Error clicking tile:', error);\r\n    }\r\n  };\r\n\r\n  // Prepare graph data for activation times\r\n  const chartData = {\r\n    labels: activePeriods.map(entry => `${entry.start.toLocaleTimeString()} - ${entry.end.toLocaleTimeString()}`),\r\n    datasets: [\r\n      {\r\n        label: `Tile Activation Durations`,\r\n        data: activePeriods.map(entry => entry.tile),\r\n        borderColor: 'blue',\r\n        backgroundColor: 'rgba(0, 0, 255, 0.2)',\r\n        stepped: true,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-4xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\r\n      <h1 className=\"text-2xl font-bold mb-4 text-gray-800\">Tile Activity Monitor</h1>\r\n\r\n      <div className=\"grid grid-cols-10 gap-2\">\r\n        {Array.from({ length: 100 }, (_, i) => i + 1).map(number => (\r\n          <button\r\n            key={number}\r\n            className={`aspect-square flex items-center justify-center text-sm font-medium border rounded transition-colors duration-300\r\n              ${activeTile === number ? \"bg-blue-500 text-white\" : \"bg-gray-200 hover:bg-gray-100\"}\r\n            `}\r\n            onClick={() => handleTileClick(number)}\r\n          >\r\n            {number}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Ensure the graph is always visible, even if no data exists */}\r\n      <div className=\"mt-6 p-4 bg-gray-100 rounded\">\r\n        <h2 className=\"text-lg font-semibold mb-2\">Tile Activation Timeline (Past 12 Hours)</h2>\r\n        {activePeriods.length > 0 ? (\r\n          <Line data={chartData} options={{ scales: { y: { beginAtZero: true, title: { display: true, text: \"Tile Number\" } } } }} />\r\n        ) : (\r\n          <p className=\"text-gray-500\">No activations in the past 12 hours.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TileGrid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}